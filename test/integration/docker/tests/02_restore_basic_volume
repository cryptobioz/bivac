#!/bin/bash

# Prepare environment

test_valid=true
canary=8ft8HJ3teCg8S1WeH5bwhNBZEtBJNs
export AWS_ACCESS_KEY_ID=OBQZY3DV6VOEZ9PG6NIM
export AWS_SECRET_ACCESS_KEY=7e88XeX0j3YdB6b1o0zU2GhG0dX6tFMy3Haty

docker volume create canary
echo $canary | sudo tee /var/lib/docker/volumes/canary/_data/canary
sudo mkdir -p /var/lib/docker/volumes/canary/_data/foo/bar
echo $canary | sudo tee /var/lib/docker/volumes/canary/_data/foo/bar/canary

sleep 10

# Start Bivac
docker run -d --hostname=testing --name testing --rm -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -e BIVAC_TARGET_URL=s3:http://172.17.0.2:9000/bivac-testing/docker \
  -e BIVAC_LOG_LEVEL=$2 \
  -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
  -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
  -e RESTIC_PASSWORD=toto \
  -e BIVAC_SERVER_PSK=toto \
  -e BIVAC_REFRESH_RATE=10s \
  -e BIVAC_AGENT_IMAGE=$1 \
  -p 8182:8182 \
  $1 manager

sleep 10

canary_waiting_backup=true
while $canary_waiting_backup; do
  canary_volume=$(curl -s -H "Authorization: Bearer toto" http://127.0.0.1:8182/volumes | jq -r '.[] | select(.ID | contains("canary"))')
  if [ "$(echo $canary_volume | jq -r '.LastBackupStatus')" = "Success" ]; then
    canary_waiting_backup=false
  elif [ "$(echo $canary_volume | jq -r '.LastBackupStatus')" = "Error" ]; then
    echo $(echo $canary_volume | jq -r '.Logs')
    canary_waiting_backup=false
  fi
  sleep 10
done

# Canaries
dump=$(docker run -it --rm -e RESTIC_PASSWORD=toto -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY restic/restic:latest -q -r s3:http://172.17.0.2:9000/bivac-testing/docker/testing/canary dump latest /var/lib/docker/volumes/canary/_data/canary)
dump=${dump%$'\r'}
if [[ $dump != $canary ]]; then
  echo "Canary: backup failed."
  test_valid=false
fi
dump=$(docker run -it --rm -e RESTIC_PASSWORD=toto -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY restic/restic:latest -q -r s3:http://172.17.0.2:9000/bivac-testing/docker/testing/canary dump latest /var/lib/docker/volumes/canary/_data/foo/bar/canary)
dump=${dump%$'\r'}
if [[ $dump != $canary ]]; then
  echo "Canary: backup failed."
  test_valid=false
fi

# Cleanup canary volume
sudo rm -rf /var/lib/docker/volumes/canary/_data/*

# Restore canary volume
docker exec -it testing bivac restore canary

# Canaries
dump=$(sudo cat /var/lib/docker/volumes/canary/_data/canary)
dump=${dump%$'\r'}
if [[ $dump != $canary ]]; then
  echo "Canary: backup failed."
  test_valid=false
fi
dump=$(sudo cat /var/lib/docker/volumes/canary/_data/foo/bar/canary)
dump=${dump%$'\r'}
if [[ $dump != $canary ]]; then
  echo "Canary: backup failed."
  test_valid=false
fi

if [ "$test_valid" = true ]; then
  echo -e "\e[32m[+] Basic : standard data dir restoration\e[39m"
else
  echo -e "\e[31m[-] Basic : standard data dir restoration\e[39m"
fi

# Clean up environment
docker kill testing
docker volume rm canary
docker run --rm -e MC_HOST_minio=http://OBQZY3DV6VOEZ9PG6NIM:7e88XeX0j3YdB6b1o0zU2GhG0dX6tFMy3Haty@172.17.0.2:9000 minio/mc rb --force minio/bivac-testing
docker run --rm -e MC_HOST_minio=http://OBQZY3DV6VOEZ9PG6NIM:7e88XeX0j3YdB6b1o0zU2GhG0dX6tFMy3Haty@172.17.0.2:9000 minio/mc mb minio/bivac-testing
